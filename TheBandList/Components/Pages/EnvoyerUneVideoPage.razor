@page "/envoyerunevideo"
@using Microsoft.EntityFrameworkCore
@using TheBandList.Data
@using Microsoft.AspNetCore.Components.Forms
@inject TheBandListDbContext _context

<PageTitle>Soumettre un niveau</PageTitle>

<h3>Soumettre un niveau</h3>

<EditForm Model="newSubmission">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label for="nomNiveau" class="form-label">Nom du niveau</label>
        <InputText id="nomNiveau" class="form-control" @bind-Value="newSubmission.NomNiveau" @onkeydown="HandleKeyDownNiveau" @oninput="OnNiveauInput" @onblur="HandleFocusOutNiveau" @onfocus="OnFocusNiveau" />
        <ul class="list-group">
            @if (niveauSuggestions.Any())
            {
                @foreach (var suggestion in niveauSuggestions.Select((value, index) => new { value, index }))
                {
                    <li class="list-group-item @(selectedNiveauIndex == suggestion.index ? "active" : "")"
                        @onclick="(() => SelectNiveau(suggestion.value))">
                        @suggestion.value
                    </li>
                }
            }
        </ul>
    </div>

    <div class="mb-3">
        <label for="nomUtilisateur" class="form-label">Nom d'utilisateur</label>
        <InputText id="nomUtilisateur" class="form-control" @bind-Value="newSubmission.NomUtilisateur" @onkeydown="HandleKeyDownUtilisateur" @oninput="OnUtilisateurInput" @onblur="HandleFocusOutUtilisateur" @onfocus="OnFocusUtilisateur" />
        <ul class="list-group">
            @if (utilisateurSuggestions.Any())
            {
                @foreach (var suggestion in utilisateurSuggestions.Select((value, index) => new { value, index }))
                {
                    <li class="list-group-item @(selectedUtilisateurIndex == suggestion.index ? "active" : "")"
                        @onclick="(() => SelectUtilisateur(suggestion.value))">
                        @suggestion.value
                    </li>
                }
            }
        </ul>
    </div>

    <div class="mb-3">
        <label for="urlVideo" class="form-label">URL de la vidéo</label>
        <InputText id="urlVideo" class="form-control" @bind-Value="newSubmission.UrlVideo" />
    </div>

    <button type="button" class="btn btn-primary" @onclick="ValidateAndSubmit">Soumettre</button>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="text-danger mt-2">@errorMessage</div>
    }

    @if (submissionSuccess)
    {
        <div class="text-success mt-2">Soumission réussie !</div>
    }
</EditForm>

@code {
    private SoumissionNiveau newSubmission = new SoumissionNiveau();
    private string errorMessage;
    private bool submissionSuccess;

    private List<string> niveauSuggestions = new();
    private List<string> utilisateurSuggestions = new();

    private int selectedNiveauIndex = -1;
    private int selectedUtilisateurIndex = -1;

    private async Task OnNiveauInput(ChangeEventArgs e)
    {
        string input = e.Value?.ToString().ToLower() ?? string.Empty;

        if (string.IsNullOrWhiteSpace(input))
        {
            niveauSuggestions.Clear();
            StateHasChanged();
            selectedNiveauIndex = -1;
        }
        else
        {
            niveauSuggestions = await _context.Niveaux
                .Where(n => n.Nom.ToLower().Contains(input))
                .Select(n => n.Nom)
                .Take(5)
                .ToListAsync();
        }

        StateHasChanged();
    }

    private async Task OnUtilisateurInput(ChangeEventArgs e)
    {
        string input = e.Value?.ToString().ToLower() ?? string.Empty;

        if (string.IsNullOrWhiteSpace(input))
        {
            utilisateurSuggestions.Clear();
            StateHasChanged();
            selectedUtilisateurIndex = -1;
        }
        else
        {
            utilisateurSuggestions = await _context.Utilisateurs
                .Where(u => u.Nom.ToLower().Contains(input))
                .Select(u => u.Nom)
                .Take(5)
                .ToListAsync();
        }

        StateHasChanged();
    }

    private void HandleKeyDownNiveau(KeyboardEventArgs e)
    {
        if (niveauSuggestions.Any())
        {
            if (e.Key == "ArrowDown")
            {
                selectedNiveauIndex = (selectedNiveauIndex + 1) % niveauSuggestions.Count;
            }
            else if (e.Key == "ArrowUp")
            {
                selectedNiveauIndex = (selectedNiveauIndex - 1 + niveauSuggestions.Count) % niveauSuggestions.Count;
            }
            else if (e.Key == "Enter" && selectedNiveauIndex >= 0)
            {
                SelectNiveau(niveauSuggestions[selectedNiveauIndex]);
            }
        }
    }

    private void HandleKeyDownUtilisateur(KeyboardEventArgs e)
    {
        if (utilisateurSuggestions.Any())
        {
            if (e.Key == "ArrowDown")
            {
                selectedUtilisateurIndex = (selectedUtilisateurIndex + 1) % utilisateurSuggestions.Count;
            }
            else if (e.Key == "ArrowUp")
            {
                selectedUtilisateurIndex = (selectedUtilisateurIndex - 1 + utilisateurSuggestions.Count) % utilisateurSuggestions.Count;
            }
            else if (e.Key == "Enter" && selectedUtilisateurIndex >= 0)
            {
                SelectUtilisateur(utilisateurSuggestions[selectedUtilisateurIndex]);
            }
        }
    }

    private void SelectNiveau(string nomNiveau)
    {
        newSubmission.NomNiveau = nomNiveau;
        niveauSuggestions.Clear();
        selectedNiveauIndex = -1;
        StateHasChanged();
    }

    private void SelectUtilisateur(string nomUtilisateur)
    {
        newSubmission.NomUtilisateur = nomUtilisateur;
        utilisateurSuggestions.Clear();
        selectedUtilisateurIndex = -1;
        StateHasChanged();
    }

    private void ValidateAndSubmit()
    {
        if (string.IsNullOrWhiteSpace(newSubmission.NomNiveau))
        {
            errorMessage = "Veuillez remplir le champ : Nom du niveau.";
            submissionSuccess = false;
            return;
        }

        if (string.IsNullOrWhiteSpace(newSubmission.NomUtilisateur))
        {
            errorMessage = "Veuillez remplir le champ : Nom d'utilisateur.";
            submissionSuccess = false;
            return;
        }

        if (string.IsNullOrWhiteSpace(newSubmission.UrlVideo))
        {
            errorMessage = "Veuillez remplir le champ : URL de la vidéo.";
            submissionSuccess = false;
            return;
        }

        errorMessage = string.Empty;
        submissionSuccess = false;

        _ = HandleValidSubmit();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            newSubmission.DateSoumission = DateTime.Now;
            newSubmission.Statut = "pending";

            _context.SoumissionsNiveaux.Add(newSubmission);
            await _context.SaveChangesAsync();

            newSubmission = new SoumissionNiveau();
            submissionSuccess = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la soumission : {ex.Message}");
            submissionSuccess = false;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void HandleFocusOutNiveau(FocusEventArgs e)
    {
        Task.Delay(100).ContinueWith(_ =>
        {
            niveauSuggestions.Clear();
            selectedNiveauIndex = -1;
            InvokeAsync(StateHasChanged);
        });
    }


    private void HandleFocusOutUtilisateur(FocusEventArgs e)
    {
        Task.Delay(100).ContinueWith(_ =>
        {
            utilisateurSuggestions.Clear();
            selectedUtilisateurIndex = -1;
            InvokeAsync(StateHasChanged);
        });
    }

    private async void OnFocusNiveau(FocusEventArgs e)
    {
        if (!string.IsNullOrWhiteSpace(newSubmission.NomNiveau))
        {
            niveauSuggestions = await _context.Niveaux
                .Where(n => n.Nom.ToLower().Contains(newSubmission.NomNiveau.ToLower()))
                .Select(n => n.Nom)
                .Take(5)
                .ToListAsync();

            StateHasChanged();
        }
    }

    private async void OnFocusUtilisateur(FocusEventArgs e)
    {
        if (!string.IsNullOrWhiteSpace(newSubmission.NomUtilisateur))
        {
            utilisateurSuggestions = await _context.Utilisateurs
                .Where(u => u.Nom.ToLower().Contains(newSubmission.NomUtilisateur.ToLower()))
                .Select(u => u.Nom)
                .Take(5)
                .ToListAsync();

            StateHasChanged();
        }
    }

}

<style>
    .list-group-item.active {
        background-color: #007bff;
        color: white;
    }
</style>