// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TheBandListApplication.Data;

#nullable disable

namespace TheBandListApplication.Migrations
{
    [DbContext(typeof(TheBandListDbContext))]
    [Migration("20241213185013_db2")]
    partial class db2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TheBandListApplication.Data.Classement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassementPosition")
                        .HasColumnType("integer");

                    b.Property<int>("NiveauId")
                        .HasColumnType("integer");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NiveauId");

                    b.ToTable("Classements");
                });

            modelBuilder.Entity("TheBandListApplication.Data.CreateurNiveau", b =>
                {
                    b.Property<int>("CreateurId")
                        .HasColumnType("integer");

                    b.Property<int>("NiveauId")
                        .HasColumnType("integer");

                    b.HasKey("CreateurId", "NiveauId");

                    b.HasIndex("NiveauId");

                    b.ToTable("CreateursNiveaux");
                });

            modelBuilder.Entity("TheBandListApplication.Data.DifficulteFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DifficulteRateId")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NomDuFeature")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DifficulteRateId");

                    b.ToTable("DifficulteFeatures");
                });

            modelBuilder.Entity("TheBandListApplication.Data.Niveau", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAjout")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Duree")
                        .HasColumnType("integer");

                    b.Property<string>("IdDuNiveauDansLeJeu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Miniature")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Placement")
                        .HasColumnType("integer");

                    b.Property<int>("PublisherId")
                        .HasColumnType("integer");

                    b.Property<int>("RatingId")
                        .HasColumnType("integer");

                    b.Property<string>("UrlIframeSrcVerification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VerifieurId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.HasIndex("RatingId");

                    b.HasIndex("VerifieurId");

                    b.ToTable("Niveaux");
                });

            modelBuilder.Entity("TheBandListApplication.Data.NiveauDifficulteRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NomDeLaDifficulte")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NiveauxDifficulteRates");
                });

            modelBuilder.Entity("TheBandListApplication.Data.Pack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PointsBonus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Packs");
                });

            modelBuilder.Entity("TheBandListApplication.Data.PackNiveau", b =>
                {
                    b.Property<int>("PackId")
                        .HasColumnType("integer");

                    b.Property<int>("NiveauId")
                        .HasColumnType("integer");

                    b.HasKey("PackId", "NiveauId");

                    b.HasIndex("NiveauId");

                    b.ToTable("PackNiveaux");
                });

            modelBuilder.Entity("TheBandListApplication.Data.ReussiteNiveau", b =>
                {
                    b.Property<int>("UtilisateurId")
                        .HasColumnType("integer");

                    b.Property<int>("NiveauId")
                        .HasColumnType("integer");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UtilisateurId", "NiveauId");

                    b.HasIndex("NiveauId");

                    b.ToTable("ReussitesNiveaux");
                });

            modelBuilder.Entity("TheBandListApplication.Data.ReussitePack", b =>
                {
                    b.Property<int>("UtilisateurId")
                        .HasColumnType("integer");

                    b.Property<int>("PackId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateReussite")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UtilisateurId", "PackId");

                    b.HasIndex("PackId");

                    b.ToTable("ReussitesPack");
                });

            modelBuilder.Entity("TheBandListApplication.Data.SoumissionNiveau", b =>
                {
                    b.Property<int>("IdSoumission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSoumission"));

                    b.Property<DateTime>("DateSoumission")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NomNiveau")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NomUtilisateur")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UrlVideo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdSoumission");

                    b.ToTable("SoumissionsNiveaux");
                });

            modelBuilder.Entity("TheBandListApplication.Data.Utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("TheBandListApplication.Data.Classement", b =>
                {
                    b.HasOne("TheBandListApplication.Data.Niveau", "Niveau")
                        .WithMany()
                        .HasForeignKey("NiveauId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Niveau");
                });

            modelBuilder.Entity("TheBandListApplication.Data.CreateurNiveau", b =>
                {
                    b.HasOne("TheBandListApplication.Data.Utilisateur", "Createur")
                        .WithMany()
                        .HasForeignKey("CreateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBandListApplication.Data.Niveau", "Niveau")
                        .WithMany()
                        .HasForeignKey("NiveauId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Createur");

                    b.Navigation("Niveau");
                });

            modelBuilder.Entity("TheBandListApplication.Data.DifficulteFeature", b =>
                {
                    b.HasOne("TheBandListApplication.Data.NiveauDifficulteRate", "DifficulteRate")
                        .WithMany()
                        .HasForeignKey("DifficulteRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DifficulteRate");
                });

            modelBuilder.Entity("TheBandListApplication.Data.Niveau", b =>
                {
                    b.HasOne("TheBandListApplication.Data.Utilisateur", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBandListApplication.Data.DifficulteFeature", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBandListApplication.Data.Utilisateur", "Verifieur")
                        .WithMany()
                        .HasForeignKey("VerifieurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");

                    b.Navigation("Rating");

                    b.Navigation("Verifieur");
                });

            modelBuilder.Entity("TheBandListApplication.Data.PackNiveau", b =>
                {
                    b.HasOne("TheBandListApplication.Data.Niveau", "Niveau")
                        .WithMany()
                        .HasForeignKey("NiveauId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBandListApplication.Data.Pack", "Pack")
                        .WithMany()
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Niveau");

                    b.Navigation("Pack");
                });

            modelBuilder.Entity("TheBandListApplication.Data.ReussiteNiveau", b =>
                {
                    b.HasOne("TheBandListApplication.Data.Niveau", "Niveau")
                        .WithMany()
                        .HasForeignKey("NiveauId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBandListApplication.Data.Utilisateur", "Utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Niveau");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("TheBandListApplication.Data.ReussitePack", b =>
                {
                    b.HasOne("TheBandListApplication.Data.Pack", "Pack")
                        .WithMany()
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBandListApplication.Data.Utilisateur", "Utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pack");

                    b.Navigation("Utilisateur");
                });
#pragma warning restore 612, 618
        }
    }
}
